// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String   @id @default(uuid())
  telegramId        BigInt   @unique @map("telegram_id")
  username          String?
  firstName         String   @map("first_name")
  lastName          String?  @map("last_name")
  tonWalletAddress  String   @map("ton_wallet_address")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  createdGroups     Group[]  @relation("GroupCreator")
  groupMembers      GroupMember[]
  expenses          Expense[]
  expenseParticipants ExpenseParticipant[]
  settlementsFrom   Settlement[] @relation("SettlementFrom")
  settlementsTo     Settlement[] @relation("SettlementTo")
  balances          Balance[]

  @@map("users")
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdBy   String   @map("created_by")
  inviteCode  String   @unique @map("invite_code")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  creator     User     @relation("GroupCreator", fields: [createdBy], references: [id])
  members     GroupMember[]
  expenses    Expense[]
  settlements Settlement[]
  balances    Balance[]

  @@map("groups")
}

model GroupMember {
  id       String   @id @default(uuid())
  groupId  String   @map("group_id")
  userId   String   @map("user_id")
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now()) @map("joined_at")
  isActive Boolean  @default(true) @map("is_active")

  // Relations
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model Expense {
  id            String   @id @default(uuid())
  groupId       String   @map("group_id")
  payerId       String   @map("payer_id")
  description   String?
  amount        Float
  category      String?
  receiptImage  String?  @map("receipt_image")
  splitType     SplitType @map("split_type")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  payer         User     @relation(fields: [payerId], references: [id])
  participants  ExpenseParticipant[]

  @@map("expenses")
}

model ExpenseParticipant {
  id         String   @id @default(uuid())
  expenseId  String   @map("expense_id")
  userId     String   @map("user_id")
  amountOwed Float    @map("amount_owed")
  isSettled  Boolean  @default(false) @map("is_settled")
  settledAt  DateTime? @map("settled_at")

  // Relations
  expense    Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
  @@map("expense_participants")
}

model Settlement {
  id                  String        @id @default(uuid())
  groupId             String        @map("group_id")
  fromUserId          String        @map("from_user_id")
  toUserId            String        @map("to_user_id")
  amount              Float
  status              SettlementStatus @default(PENDING)
  tonTransactionHash  String?       @map("ton_transaction_hash")
  createdAt           DateTime      @default(now()) @map("created_at")
  completedAt         DateTime?     @map("completed_at")

  // Relations
  group               Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  fromUser            User          @relation("SettlementFrom", fields: [fromUserId], references: [id])
  toUser              User          @relation("SettlementTo", fields: [toUserId], references: [id])

  @@map("settlements")
}

model Balance {
  id        String   @id @default(uuid())
  groupId   String   @map("group_id")
  userId    String   @map("user_id")
  balance   Float    @default(0)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
  @@map("balances")
}

enum Role {
  ADMIN
  MEMBER
}

enum SplitType {
  EQUAL
  CUSTOM
}

enum SettlementStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
